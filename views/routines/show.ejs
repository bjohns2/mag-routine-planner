<!DOCTYPE html>
<%- include('../partials/navbar.ejs') %>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>MAG Routine Planner</title>
    <link rel="stylesheet" type="text/css" href="/css/skeleton.css" />
  </head>
  <body class="container">
    <div class="row">
      <h1> <%= routine.name %> </h1>
      <form action="/routines/<%= routine._id %>" method="POST">
        <label for="name">Name</label>
        <input type="text" name="name" value="<%= routine.name %>"><br>
        <label for="event">Event</label>
        <select name="event" id="event">
        <% ['FX', 'PH', 'SR', 'VT', 'PB', 'HB'].forEach((eventType) => { %>
            <% if (eventType === routine.event) { %>
              <option value="<%= eventType %>" selected><%= eventType %></option>
            <% } else { %>
              <option value="<%= eventType %>"><%= eventType %></option>
            <% }  %>
        <% })  %>
        </select> 
        <table>
        <% for (var i = 1; i < 9; i++) {%>
          <tr>
            <td>
              <label for="skill-<%= i %>" id="skill-<%= i %>">Skill <%= i %></label>
            </td>
            <td>
              <select name="skill-<%= i %>">
                <option value="none" >None</option>
                <% skills.forEach(skill => {%> 
                  <% if (routine[`skill-${i}`] === skill._id.toString()) { %>
                      <option  value="<%= skill._id.toString() %>" selected> <%= skill.name %></option>
                    <%  } else { %>
                      <option  value="<%= skill._id.toString() %>"> <%= skill.name %></option>
                    <% } %>
                <% }) %>
              </select>
            </td>
          </tr>
        <%}%>
        </table>

        <button type="submit">Save</button>
      </form>

      <h2>Worksheet</h2>
      <table>
        <tr>
          <th>Name of Skill</th>
          <th>Difficulty (A-H)</th>
          <th>Value (0.1 - 0.8)</th>
          <th>Element group (1-4)</th>
        </tr>
        <% var totalSkillValue = 0.0 %>
        <% var elementGroups = new Array() %>
        <% var totalSkills = 0 %>
        <% var finalSkill = null %>
        <% var hasRequiredRingsSkill = false %>
        <% for (var i = 1; i < 9; i++) {%>
          <tr>
            <!-- this is horrifically inefficient -->
            <% skills.forEach(skill => {%> 
              <% if (routine[`skill-${i}`] === skill._id.toString()) { %>
                <% totalSkillValue = Number.parseFloat((Number.parseFloat(totalSkillValue) + Number.parseFloat(skill.value))).toFixed(2) %>
                <% skill.elementGroup && elementGroups.push(skill.elementGroup) %>
                <% routine[`skill-${i}`] !== 'none' ? totalSkills += 1 : 0 %>
                <% routine[`skill-${i}`] !== 'none' ? finalSkill = skill : 0 %>
                <!-- for still rings (event SR), remove 0.3 if neither of skills 75 and 81 elemtn group 1 are present -->
                <% if (skill._id.toString() === '630babe8a949942356e62f03' ||  skill._id.toString() === '630babfa13fb4b94f010ed49') { hasRequiredRingsSkill = true } %>

                <td><%= skill.name %></td>
                <td><%= skill.difficulty %></td>
                <td><%= skill.value %></td>
                <td><%= skill.elementGroup %></td>
                <%  } %>
            <% }) %>
          </tr>
        <%}%>
      </table>
      <!-- in any event except floor (or vault), the routeine has a dismount if the last skill is elemtn group 4.
        for floor, the routeine has a dismount if the last skill is elemtn group 2, or 3 (floor does not have an element group 4)
        ignore the elenment group bonus for dismount skills (the dismount skill element group doesn't count as a uique element group)
        BUT add a dismount bonus of 0.3 if the dismount is an A, 0.5 if it's not an A
      -->
      <% var dismountSkill = (finalSkill?.elementGroup === '4' || (routine.event === 'FX' && finalSkill?.elementGroup === '2') || (routine.event === 'FX' && finalSkill?.elementGroup === '3')) ? finalSkill : null %>
      <% var dismountBonus = 0 %>
      <% if (dismountSkill?.difficulty === 'A') { dismountBonus = 0.3 }%>
      <% if (dismountSkill?.difficulty === 'B') { dismountBonus = 0.5 }%>
      <% if (dismountSkill) { elementGroups.pop(1) } %> <!-- ignore the element group bonus for the dismount-->
      <% var elementGroupsSet = new Set(elementGroups) %>
      <p>Total skill value: <%= totalSkillValue %></p>
      <p>Unique element groups (excluding dismount):  <%= [...elementGroupsSet].join(', ') %> (<%= elementGroupsSet.size %> total)</p>
      <% if (dismountSkill) {%>
        <p>Dismount skill, <b><%= dismountSkill.name %></b>, is difficulty <b><%= dismountSkill.difficulty %></b>, resulting in dismount bonus <b><%= dismountBonus %></b></p>
      <% } %>
      <!-- for still rings (event SR), remove 0.3 if neither of skills 75 and 81 elemtn group 1 are present -->
      <% var ringsDeductionCopy = '' %>
      <% if (routine.event === 'SR') { ringsDeductionCopy = '- missing handstand deduction'} %>
      <% var ringsDeductionMinus = '' %>
      <% if (routine.event === 'SR') { ringsDeductionMinus = '-'} %>
      <% var ringsDeduction = null %>
      <% if (routine.event === 'SR' && hasRequiredRingsSkill) { ringsDeduction = 0} %>
      <% if (routine.event === 'SR' && !hasRequiredRingsSkill) { ringsDeduction = 0.3} %>
      <p>Total skill count: <%= totalSkills %> </p>
      <p>
        Start value = total skill value + ( 0.5 * number of unique element groups, excluding dismount ) + dismount bonus + (10 - skill count penalty) <%= ringsDeductionCopy %>
        <br/>
        Start value = <%= totalSkillValue %> + ( 0.5 * <%= elementGroupsSet.size %> ) + <%= dismountBonus %> + (10 - <%= skillCountPenalty(totalSkills) %>) <%= ringsDeductionMinus %> <%= ringsDeduction %>
        <br/>
        Start value = <%=  Number.parseFloat(totalSkillValue ) + (0.5 *  Number.parseFloat(elementGroupsSet.size)) + dismountBonus + 10 - skillCountPenalty(totalSkills) - ringsDeduction%>
      </p>
    </div>
  </body>
</html>

<%
function skillCountPenalty(skillCount) {
    switch(skillCount) {
    case 1:
      return 5;
    case 2:
      return 4;
    case 3:
      return 3;
    case 4:
      return 2;
    case 5:
      return 1;
    default:
      return 0;
  }  
}
%>

